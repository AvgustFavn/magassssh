import asyncio
import logging

from aiogram.utils import executor
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, ApplicationBuilder, \
    MessageHandler, filters
from back import *

loop = asyncio.get_event_loop()
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    result = await loop.run_in_executor(None, get_user, user)
    if not result:
        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data='1')],
             [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='2')],
            [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='3')],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑—ã", callback_data='4')],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='9')],
            [InlineKeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='11')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data='1')],
            [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='2')],
            [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='3')],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑—ã", callback_data='4')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='5')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='6')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='7')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='10')],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑—ã, –∞–¥–º–∏–Ω –≤–µ—Ä—Å–∏—è", callback_data='8')],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='9')],
            [InlineKeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='11')]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text=f'–†–∞–¥—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, {user.first_name}, —Ä–∞—Å—Å–∫–∞–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! '
                                             f'–£–∂–µ 11 –ª–µ—Ç –º—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞–µ–º —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∑–∞ —Ä—É–±–µ–∂–æ–ºü´∂üèª '
                                             f'–û–¥–µ–≤–∞—Ç—å—Å—è —Å—Ç–∏–ª—å–Ω–æ –∏ –Ω–∏ –≤ —á–µ–º —Å–µ–±–µ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å! –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ '
                                             f'–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ 100% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–µ—â–∏, –≤—Å–µ —Ç–æ–≤–∞—Ä—ã '
                                             f'–∑–∞–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –±—Ä–µ–Ω–¥–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –º–∏—Ä–æ–≤—ã—Ö '
                                             f'–º—É–ª—å—Ç–∏–±—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∞–π—Ç–∞—Ö. –ü–æ –∑–∞–ø—Ä–æ—Å—É –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –∏–Ω–≤–æ–π—Å (—á–µ–∫ –æ –ø–æ–∫—É–ø–∫–µ). ',

                                  reply_markup=reply_markup)


async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = update.effective_user
    await query.answer()
    if query.data == '1':
        keyboard = []
        cats = session.query(Categories).all()
        cats = session.query(Categories).filter(Categories.family == None)
        for cat in cats:
            keyboard.append([InlineKeyboardButton(f"{cat.name}", callback_data=f'cat_{cat.id}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message is not None:
            await update.message.reply_text(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=reply_markup)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=reply_markup)

    if query.data == '11':
        if update.message is not None:
            await update.message.reply_text(text='‚òéÔ∏èüíñ –ù–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: whatsup +79181724444\n–ê —Ç–∞–∫ –∂–µ –Ω–∞—à'
                                                 ' –∫–∞–Ω–∞–ª: https://t.me/mashgamash \n–í–∫: https://vk.com/mash.gamash \n'
                                                 '#–æ—Ç–∑—ã–≤—ã –æ –Ω–∞—Å —Å–æ–±—Ä–∞–Ω—ã –≤ –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö –í–ö '
                                                 'https://vk.com/album-32162783_285703116 –∏ –ò–ì '
                                                 'https://www.instagram.com/s/aGlnaGxpZ2h0OjE3OTQ0Nzk3NTkyMDMzMzQ3?story_media_id=2901076547017246090&igshid=YmMyMTA2M2Y=')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='‚òéÔ∏èüíñ –ù–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: whatsup +79181724444\n–ê —Ç–∞–∫ –∂–µ –Ω–∞—à'
                                                 ' –∫–∞–Ω–∞–ª: https://t.me/mashgamash \n–í–∫: https://vk.com/mash.gamash \n'
                                                 '#–æ—Ç–∑—ã–≤—ã –æ –Ω–∞—Å —Å–æ–±—Ä–∞–Ω—ã –≤ –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö –í–ö '
                                                 'https://vk.com/album-32162783_285703116 –∏ –ò–ì '
                                                 'https://www.instagram.com/s/aGlnaGxpZ2h0OjE3OTQ0Nzk3NTkyMDMzMzQ3?story_media_id=2901076547017246090&igshid=YmMyMTA2M2Y=')

    elif query.data == '2':
        userr = update.effective_user
        user = session.query(User).filter(User.username == userr.username).first()
        if user:
            bask = session.query(Basket).filter(Basket.user_id == user.id)
            if bask:
                for b in bask:
                    good = session.query(Goods).filter(Goods.id == b.goods_id).first()
                    if good.sale < 1.0:
                        f_p = good.price - (good.sale * good.price)
                    else:
                        f_p = good.price
                    text = f'{good.name} \n'  \
                    f'{good.desc} \n' \
                    f'–¶–ï–ù–ê: {f_p } + –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê ' \
                    f'(–∏–∑ —Ä–∞—Å—á–µ—Ç–∞ 230 —Ä. –∑–∞ 100 –≥—Ä.) \n'
                    if good.size:
                        text += f'–†–∞–∑–º–µ—Ä {good.size} \n'
                    if good.count:
                        text += f'–ù–∞–ª–∏—á–∏–µ {good.count} —à—Ç. \n'

                    keyboard = [[InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –µ—â–µ",
                                                      callback_data=f'good_{good.id}_add_{user.id}')],
                                [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                      callback_data=f'good_{good.id}_del_{user.id}')],]

                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_photo(photo=(open(f'{BASE_DIR}\\mashgamash_shop_bot\\{good.pic}', "rb")),
                                                 caption=text, reply_markup=reply_markup,
                                                 chat_id=userr.id)

                keyboard = [[InlineKeyboardButton(f"–ó–∞–∫–∞–∑–∞—Ç—å",
                                                  callback_data=f'order_{user.id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                if update.message is not None:
                    await update.message.reply_text(text='–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ', reply_markup=reply_markup)
                elif update.callback_query is not None:
                    await update.callback_query.message.reply_text(text='–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ', reply_markup=reply_markup)
            else:
                if update.message is not None:
                    await update.message.reply_text(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(')
                elif update.callback_query is not None:
                    await update.callback_query.message.reply_text(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(')

        else:
            if update.message is not None:
                await update.message.reply_text(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(')

    elif query.data == '3':
        user = update.effective_user
        userr = session.query(User).filter(User.username == user.username).first()
        if userr:
            bask = session.query(Favorites).filter(Favorites.user_id == userr.id)
            if bask:
                for b in bask:
                    good = session.query(Goods).filter(Goods.id == b.goods_id).first()
                    if good.sale < 1.0:
                        f_p = good.price - (good.sale * good.price)
                    else:
                        f_p = good.price
                    text = f'{good.name} \n' \
                    f'{good.desc} \n' \
                    f'–¶–ï–ù–ê: {f_p} + –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê ' \
                    f'(–∏–∑ —Ä–∞—Å—á–µ—Ç–∞ 230 —Ä. –∑–∞ 100 –≥—Ä.) \n'
                    if good.size:
                        text += f'–†–∞–∑–º–µ—Ä {good.size} \n'
                    if good.count:
                        text += f'–ù–∞–ª–∏—á–∏–µ {good.count} —à—Ç. \n'

                    keyboard = [[InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                                      callback_data=f'good_{good.id}_add_{userr.id}')],
                                [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                      callback_data=f'fav_{good.id}_del_{userr.id}')],]

                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_photo(photo=(open(f'{BASE_DIR}\\mashgamash_shop_bot\\{good.pic}', "rb")),
                                                 caption=text, reply_markup=reply_markup,
                                                 chat_id=user.id)

                keyboard = [[InlineKeyboardButton(f"–ó–∞–∫–∞–∑–∞—Ç—å",
                                                  callback_data=f'order_{userr.id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                # if update.message is not None:
                #     await update.message.reply_text(reply_markup=reply_markup)
                # elif update.callback_query is not None:
                #     await update.callback_query.message.reply_text(text='–ó–∞–∫–∞–∑–∞—Ç—å ', reply_markup=reply_markup)
            else:
                if update.message is not None:
                    await update.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
                elif update.callback_query is not None:
                    await update.callback_query.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')

        else:
            if update.message is not None:
                await update.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')

    elif query.data == '4':
        userr = update.effective_user
        user = session.query(User).filter(User.username == userr.username).first()
        if user:
            ord = session.query(Orders).filter(Orders.username_customer == userr.username).all()
            keyboard = []
            if ord:
                for o in ord:
                    keyboard.append([InlineKeyboardButton(f"{o.id} –∑–∞–∫–∞–∑", callback_data=f'ord_{o.id}')])

                reply_markup = InlineKeyboardMarkup(keyboard)
                if update.message is not None:
                    await update.message.reply_text(reply_markup=reply_markup, text='–í–∞—à–∏ –∑–∞–∫–∞–∑—ã: ')
                elif update.callback_query is not None:
                    await update.callback_query.message.reply_text(reply_markup=reply_markup, text='–í–∞—à–∏ –∑–∞–∫–∞–∑—ã: ')

            else:
                if update.message is not None:
                    await update.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
                elif update.callback_query is not None:
                    await update.callback_query.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
        else:
            if update.message is not None:
                await update.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')

    elif query.data.startswith('cat_'):
        id_cat = query.data.replace('cat_', '')
        cat = session.query(Categories).get(int(id_cat))
        sons = session.query(Categories).filter(Categories.family == int(cat.id)).all()
        keyboard = []
        user = update.effective_user
        result = await loop.run_in_executor(None, get_user, user)
        print(sons)
        if sons:
            for s in sons:
                keyboard.append([InlineKeyboardButton(f"{s.name}", callback_data=f'cat_{s.id}')])
            if result:
                keyboard.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat.name}", callback_data=f'catdel_{cat.id}')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            if update.message is not None:
                await update.message.reply_text(reply_markup=reply_markup, text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat.name} ')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(reply_markup=reply_markup, text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat.name} ')

        else:
            goods = session.query(Goods).filter(Goods.cat == cat.id)
            for good in goods:
                if good.sale < 1.0:
                    f_p = good.price - (good.sale * good.price)
                else:
                    f_p = good.price
                text = f'{good.name} \n' \
                f'{good.desc} \n' \
                f'–¶–ï–ù–ê: {f_p } + –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê ' \
                f'(–∏–∑ —Ä–∞—Å—á–µ—Ç–∞ 230 —Ä. –∑–∞ 100 –≥—Ä.) \n'
                if good.size:
                    text += f'–†–∞–∑–º–µ—Ä {good.size} \n'
                if good.count:
                    text += f'–ù–∞–ª–∏—á–∏–µ {good.count} —à—Ç. \n'

                if get_user:
                    keyboard = [[InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                                      callback_data=f'good_{good.id}_add_{user.id}')],
                                [InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                                      callback_data=f'fav_{good.id}_add_{user.id}')],
                                [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                      callback_data=f'delprod_{good.id}')],
                                [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                      callback_data=f'updateprod_{good.id}')],
                                ]
                else:
                    keyboard = [[InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                                      callback_data=f'good_{good.id}_add_{user.id}')],
                                [InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                                      callback_data=f'fav_{good.id}_add_{user.id}')], ]

                reply_markup = InlineKeyboardMarkup(keyboard)
                if good.pic and not 'None' in good.pic and not 'null' in str(good.pic).lower():
                    await context.bot.send_photo(photo=(open(f'{BASE_DIR}\\mashgamash_shop_bot\\{good.pic}', "rb")),
                                                 caption=text, reply_markup=reply_markup,
                                                 chat_id=user.id)
                else:
                    if update.message is not None:
                        await update.message.reply_text(
                            text=text, reply_markup=reply_markup)
                    elif update.callback_query is not None:
                        await update.callback_query.message.reply_text(text=text, reply_markup=reply_markup)

    elif query.data.startswith('delprod_'):
        good_id = int(query.data.replace('delprod_', ''))
        bas = session.query(Goods).filter(Goods.id == good_id).first()
        session.delete(bas)
        session.commit()
        if update.message is not None:
            await update.message.reply_text(text='–£–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä!')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='–£–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä!')

    elif query.data.startswith('catdel_'):
        cat_id = int(query.data.replace('catdel_', ''))
        bas = session.query(Categories).filter(Categories.id == cat_id).first()
        session.delete(bas)
        session.commit()
        if update.message is not None:
            await update.message.reply_text(text='–£–¥–∞–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π :)')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='–£–¥–∞–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π :)')

    elif query.data.startswith('updateprod_'):
        good_id = int(query.data.replace('updateprod_', ''))
        prod = session.query(Goods).filter(Goods.id == good_id).first()
        cat = session.query(Categories).filter(Categories.id == prod.cat).first()
        message = f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upd_product –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n' \
                  f'/upd_product id: {prod.id}; –ù–∞–∑–≤–∞–Ω–∏–µ: {prod.name}; –û–ø–∏—Å–∞–Ω–∏–µ: {prod.desc}; –¶–µ–Ω–∞: {prod.price}; –°–∫–∏–¥–∫–∞: {prod.sale}; –†–∞–∑–º–µ—Ä—ã: {prod.size};' \
                  f'–ù–∞–ª–∏—á–∏–µ: {prod.count}; –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat};\n' \
                  f'–û–ø–∏—Å–∞–Ω–∏–µ, —Å–∫–∏–¥–∫—É, —Ä–∞–∑–º–µ—Ä—ã, –∫–æ–ª-–≤–æ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç–æ ' \
                  f'—ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –≤–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –Ω–∞–¥–æ –æ—Ç–æ—Å–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. '
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)


    elif query.data.startswith('good_'):
        if 'add' in query.data:
            good_id = query.data.replace('good_', '')
            good_id = int(good_id[:good_id.find('_')])
            us = session.query(User.id).filter(User.username == user.username)
            bas = Basket(user_id=us, goods_id=good_id)
            session.add(bas)
            session.commit()
        elif 'del' in query.data:
            good_id = query.data.replace('good_', '')
            good_id = int(good_id[:good_id.find('_')])
            us = session.query(User.id).filter(User.username == user.username)
            bas = session.query(Basket).filter(Basket.user_id == us, Basket.goods_id == good_id).first()
            session.delete(bas)
            session.commit()

    elif query.data.startswith('fav_'):
        if 'del' in query.data:
            good_id = query.data.replace('fav_', '')
            good_id = int(good_id[:good_id.find('_')])
            us = session.query(User.id).filter(User.username == user.username)
            fav = session.query(Favorites).filter(Favorites.user_id == us, Favorites.goods_id == good_id).first()
            session.delete(fav)
            session.commit()
        elif 'add' in query.data:
            good_id = query.data.replace('fav_', '')
            good_id = int(good_id[:good_id.find('_')])
            us = session.query(User.id).filter(User.username == user.username)
            bas = Favorites(user_id=us, goods_id=good_id)
            session.add(bas)
            session.commit()

    elif query.data.startswith('order_'):
        us = session.query(User).filter(User.username == user.username).first()
        all_prods = session.query(Basket).filter(Basket.user_id == us.id).all()
        print(all_prods)
        text = []
        all_price = 0
        for prod in all_prods:
            good = session.query(Goods).filter(Goods.id == prod.goods_id).first()
            print(good)
            text.append(f'‚≠êÔ∏è {good.name} - —Ü–µ–Ω–∞: {good.price - (good.sale * good.price) }')
            all_price += good.price - (good.sale * good.price)
        message = '\n'.join(text)
        message += '\n \n \n' + f'–û–±—â–∞—è —Å—É–º–º–∞: {float(all_price)}\n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'
        ord = Orders(user_id=user.id, username_customer=user.username, text_about=message, final_price=float(all_price))
        session.add(ord)
        session.commit()

        keyboard = [[InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_{ord.id}')],
                    [InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'delord_{ord.id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message is not None:
            await update.message.reply_text(reply_markup=reply_markup, text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(reply_markup=reply_markup, text=message)

    elif query.data.startswith('delord_'):
        orde = query.data.replace('delord_', '')
        orde = int(orde)
        fav = session.query(Orders).filter(Orders.id == orde).first()
        session.delete(fav)
        session.commit()

    elif query.data.startswith('supp'):
        if update.message is not None:
            await update.message.reply_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –Ω–æ–º–µ—Ä—É whatsup: +79181724444 ‚≠êÔ∏èüåõ')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –Ω–æ–º–µ—Ä—É whatsup: +79181724444 ‚≠êÔ∏èüåõ')

    elif query.data.startswith('pay_'):
        user = update.effective_user
        orde = query.data.replace('pay_', '')
        orde = int(orde)
        o = session.query(Orders).filter(Orders.id == orde).first()
        if update.message is not None:
            await update.message.reply_text(text=f'–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É: 5469400999485035, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫\n'
                                                 f'2) –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ whatsup +79181724444 —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ {o.id} ‚≠êÔ∏èüåõ\n'
                                                 f'3) –î–∞–ª–µ–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏ —Å –≤–∞–º–∏ –æ–±—Å—É–¥—è—Ç –¥–µ—Ç–∞–ª–∏')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=f'–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É: 5469400999485035, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫\n'
                                                 f'2) –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ whatsup —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ {o.id} ‚≠êÔ∏èüåõ\n'
                                                 f'3) –î–∞–ª–µ–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏ —Å –≤–∞–º–∏ –æ–±—Å—É–¥—è—Ç –¥–µ—Ç–∞–ª–∏')

    elif query.data.startswith('ord_'):
        user = update.effective_user
        result = await loop.run_in_executor(None, get_user, user)
        orde = query.data.replace('ord_', '')
        orde = int(orde)
        o = session.query(Orders).filter(Orders.id == orde).first()
        message = f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {o.id}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{o.username_customer}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {o.paied}\n' \
                  f'–ó–∞–∫–∞–∑: {o.text_about}'
        keyboard = [[InlineKeyboardButton(f"–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data=f'supp')]
                    ]
        if not o.paied and not result:
            keyboard.append([InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_{o.id}')])
        if result:
            keyboard.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'delord_{o.id}')])
            if not o.paied:
                keyboard.append([InlineKeyboardButton(f"–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –û–ø–ª–∞—á–µ–Ω—ã–π (–±—É–¥–µ—Ç True, –∞ –Ω–µ False)", callback_data=f'chanord_{o.id}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message is not None:
            await update.message.reply_text(text=message, reply_markup=reply_markup)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message, reply_markup=reply_markup)

    elif query.data.startswith('chanord_'):
        orde = query.data.replace('chanord_', '')
        orde = int(orde)
        o = session.query(Orders).filter(Orders.id == orde).first()
        o.paied = True
        session.add(o)
        session.commit()

    elif query.data.startswith('pay_'):
        orde = query.data.replace('pay_', '')
        orde = int(orde)
        o = session.query(Orders).filter(Orders.id == orde).first()


    elif query.data == '5':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_cat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —à–∞–±–ª–æ–Ω:\n' \
                  '/add_cat –ù–∞–∑–≤–∞–Ω–∏–µ: –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞; –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –æ–¥–µ–∂–¥–∞;\n' \
                  '–°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == '6':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_product –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —à–∞–±–ª–æ–Ω:\n' \
                  '/add_product –ù–∞–∑–≤–∞–Ω–∏–µ: –®–ª—è–ø–∫–∞ –ø–∞–Ω–∞–º–∫–∞; –û–ø–∏—Å–∞–Ω–∏–µ: –∞–∞–∞–∞–∞–∞–∞–∞–∞; –¶–µ–Ω–∞: 2000; –°–∫–∏–¥–∫–∞: 0.2; –†–∞–∑–º–µ—Ä—ã: Xl, L, M;' \
                  '–ù–∞–ª–∏—á–∏–µ: 20; –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä;\n' \
                  '–û–ø–∏—Å–∞–Ω–∏–µ, —Å–∫–∏–¥–∫—É, —Ä–∞–∑–º–µ—Ä—ã, –∫–æ–ª-–≤–æ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç–æ ' \
                  '—ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –≤–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –Ω–∞–¥–æ –æ—Ç–æ—Å–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. ' \
                  '–°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == '7':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —à–∞–±–ª–æ–Ω:\n' \
                  '/add_admin username;\n' \
                  '–ü–∏—à–∏—Ç–µ –±–µ–∑ @. –°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == '8':
        keyboard = [[InlineKeyboardButton(f"–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ, —é–∑–µ—Ä—É, –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞", callback_data=f'findord')],
                    [InlineKeyboardButton(f"–í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data=f'allord')]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message is not None:
            await update.message.reply_text(text='–ó–∞–∫–∞–∑—ã', reply_markup=reply_markup)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text='–ó–∞–∫–∞–∑—ã', reply_markup=reply_markup)

    elif query.data == '9':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /find_prod –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —à–∞–±–ª–æ–Ω:\n' \
                  '/find_prod Adidas\n' \
                  '–°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == '10':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deladm –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞, —à–∞–±–ª–æ–Ω:\n' \
                  '/deladm username\n' \
                  '–ü–∏—à–∏—Ç–µ –Ω–∏–∫ –±–µ–∑ @. –°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == 'findord':
        message = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /findord –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ, —é–∑–µ—Ä—É, –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞, —à–∞–±–ª–æ–Ω:\n' \
                  '/findord 2000\n' \
                  '/findord username\n' \
                  '–°–æ–≤–µ—Ç—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω :)'
        if update.message is not None:
            await update.message.reply_text(text=message)
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(text=message)

    elif query.data == 'allord':
        ords = session.query(Orders).order_by(Orders.id.desc()).all()
        if ords:
            keyboard = []
            for s in ords:
                keyboard.append([InlineKeyboardButton(f"{s.id} –∑–∞–∫–∞–∑", callback_data=f'ord_{s.id}')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            if update.message is not None:
                await update.message.reply_text(reply_markup=reply_markup, text=f'–ó–∞–∫–∞–∑—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(reply_markup=reply_markup,
                                                               text=f'–ó–∞–∫–∞–∑—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É')
        else:
            if update.message is not None:
                await update.message.reply_text(text='–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ :(')
            elif update.callback_query is not None:
                await update.callback_query.message.reply_text(text='–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ :(')

async def add_cat(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)
    name = extract_value(mess, '–ù–∞–∑–≤–∞–Ω–∏–µ: ')
    family = extract_value(mess, '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ')

    prod = Categories(name=name)
    if family:
        id_family = session.query(Categories).filter(Categories.name.ilike(f'%{family}%')).first()
        if id_family:
            prod.family = int(id_family.id)
    session.add(prod)
    session.commit()
    await update.message.reply_text('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è :)')

async def add_product(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)
    name = extract_value(mess, '–ù–∞–∑–≤–∞–Ω–∏–µ: ')
    desc = extract_value(mess, '–û–ø–∏—Å–∞–Ω–∏–µ: ')
    price = extract_value(mess, '–¶–µ–Ω–∞: ')
    sale = extract_value(mess, '–°–∫–∏–¥–∫–∞: ')
    sizes = extract_value(mess, '–†–∞–∑–º–µ—Ä—ã: ')
    count = extract_value(mess, '–ù–∞–ª–∏—á–∏–µ: ')
    cat = extract_value(mess, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ')

    try:
        photo = update.message.photo[-1]
    except:
        photo = None
    file_path = None
    if photo:
        file_info = await context.bot.get_file(photo.file_id)
        id = file_info.file_id
        file_path = f"photos/{id}.jpg"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
        file_bytes = await file_info.download_as_bytearray()
        with open(file_path, "wb") as f:
            f.write(file_bytes)

    prod = Goods(name=name)
    if cat:
        id_family = session.query(Categories).filter(Categories.name.ilike(f'%{cat}%')).first()
        if id_family:
            prod.cat = int(id_family.id)
    if desc:
        prod.desc = desc
    if price:
        prod.price = float(int(price))
    if sale:
        prod.sale = float(sale)
    if sizes:
        prod.size = sizes
    if count:
        prod.count = int(count)
    if file_path:
        prod.pic = file_path
    session.add(prod)
    session.commit()
    await update.message.reply_text('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä :)')

async def deladm(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)

    try:
        mess = mess.replace('/deladm', '')
    except:
        pass

    admin = session.query(Admins).filter(Admins.name == mess).first()
    session.delete(admin)
    session.commit()
    await update.message.reply_text('–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω')

async def upd_product(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)

    try:
        mess = mess.replace('/add_admin', '')
    except:
        pass

    id = extract_value(mess, 'id: ')
    name = extract_value(mess, '–ù–∞–∑–≤–∞–Ω–∏–µ: ')
    desc = extract_value(mess, '–û–ø–∏—Å–∞–Ω–∏–µ: ')
    price = extract_value(mess, '–¶–µ–Ω–∞: ')
    sale = extract_value(mess, '–°–∫–∏–¥–∫–∞: ')
    sizes = extract_value(mess, '–†–∞–∑–º–µ—Ä—ã: ')
    count = extract_value(mess, '–ù–∞–ª–∏—á–∏–µ: ')
    cat = extract_value(mess, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ')

    try:
        photo = update.message.photo[-1]
    except:
        photo = None
    file_path = None
    if photo:
        file_info = await context.bot.get_file(photo.file_id)
        id = file_info.file_id
        file_path = f"photos/{id}.jpg"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
        file_bytes = await file_info.download_as_bytearray()
        with open(file_path, "wb") as f:
            f.write(file_bytes)

    prod = session.query(Goods).filter(Goods.id == id).first()
    if cat and cat != prod.cat:
        id_family = session.query(Categories).filter(Categories.name.ilike(f'%{cat}%')).first()
        if id_family:
            prod.cat = int(id_family.id)
    if desc and desc != prod.desc:
        prod.desc = desc
    if name and name != prod.name:
        prod.name = name
    if price and price != prod.price:
        prod.price = float(price)
    if sale and sale!= prod.sale:
        prod.sale = float(sale)
    if sizes and sizes != prod.size:
        prod.size = sizes
    if count and count != prod.count:
        prod.count = int(count)
    if file_path and file_path != prod.pic:
        prod.pic = file_path
    session.add(prod)
    session.commit()
    await update.message.reply_text('–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω :)')

async def add_admin(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)

    try:
        mess = mess.replace('/add_admin', '')
    except:
        pass

    adm = Admins(name=mess)
    session.add(adm)
    session.commit()
    await update.message.reply_text('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω :)')

async def findord(update, context):
    text = update.message.caption
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)

    try:
        mess = mess.replace('/findord', '')
    except:
        pass

    try:
        mess = int(mess)
        ords = session.query(Orders).filter(Orders.id == mess).all()
    except:
        try:
            mess = float(mess)
            ords = session.query(Orders).filter(Orders.final_price == mess).all()
        except:
            ords = session.query(Orders).filter(or_(Orders.username_customer == mess, Orders.text_about.ilike(f'%{mess}%'))).all()
    if ords:
        keyboard = []
        for s in ords:
            keyboard.append([InlineKeyboardButton(f"{s.id} –∑–∞–∫–∞–∑", callback_data=f'ord_{s.id}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message is not None:
            await update.message.reply_text(reply_markup=reply_markup, text=f'–ó–∞–∫–∞–∑—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É')
        elif update.callback_query is not None:
            await update.callback_query.message.reply_text(reply_markup=reply_markup, text=f'–ó–∞–∫–∞–∑—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É')
    else:
        await update.message.reply_text('–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ :(')

async def find_prod(update, context):
    text = update.message.caption
    user = update.effective_user
    try:
        mess = '' + text
    except:
        mess = ' '.join(context.args)

    try:
        mess = mess.replace('/find_prod', '')
    except:
        pass

    prods = session.query(Goods).filter(
        or_(Goods.name.ilike(f'%{mess}%'), Goods.desc.ilike(f'%{mess}%'))).all()
    if prods:
        for good in prods:
            if good.sale < 1.0:
                f_p = good.price - (good.sale * good.price)
            else:
                f_p = good.price
            text = f'{good.name} \n'
            f'{good.desc} \n'
            f'–¶–ï–ù–ê: {f_p } + –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê '
            f'(–∏–∑ —Ä–∞—Å—á–µ—Ç–∞ 230 —Ä. –∑–∞ 100 –≥—Ä.) \n'
            if good.size:
                text += f'–†–∞–∑–º–µ—Ä {good.size} \n'
            if good.count:
                text += f'–ù–∞–ª–∏—á–∏–µ {good.count} —à—Ç. \n'

            keyboard = [[InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                              callback_data=f'good_{good.id}_add_{user.id}')],
                        [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                              callback_data=f'good_{good.id}_del_{user.id}')], ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_photo(photo=(open(f'{BASE_DIR}\\mashgamash_shop_bot\\{good.pic}', "rb")),
                                         caption=text, reply_markup=reply_markup,
                                         chat_id=user.id)

    else:
        await update.message.reply_text('–ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ :(')

async def which_handler(update, context):
    text = update.message.caption
    if 'add_product' in text:
        await add_product(update, context)
    elif 'upd_product' in text:
        await upd_product(update, context)
def main() -> None:
    TOKEN = '6445135079:AAGAU_HhyXTMeCkbK2cNsRlIypr_o8Orjd0'
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ `ApplicationBuilder`
    application = ApplicationBuilder().token(TOKEN).build()
    start_handler = CommandHandler('start', start)
    button_handler = CallbackQueryHandler(button)
    application.add_handler(start_handler)
    application.add_handler(button_handler)
    new_admin_handler = CommandHandler('add_cat', add_cat)
    application.add_handler(new_admin_handler)
    del_admin_handler = CommandHandler('add_product', add_product)
    application.add_handler(del_admin_handler)
    rule_handler = CommandHandler('deladm', deladm)
    application.add_handler(rule_handler)
    new_shop_handler = CommandHandler('upd_product', upd_product)
    application.add_handler(new_shop_handler)
    new_rullete_handler = CommandHandler('add_admin', add_admin)
    application.add_handler(new_rullete_handler)
    del_shop_handler = CommandHandler('findord', findord)
    application.add_handler(del_shop_handler)
    new_about_handler = CommandHandler('find_prod', find_prod)
    application.add_handler(new_about_handler)
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, which_handler))
    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.run_polling()


if __name__ == '__main__':
    main()